@page "/ftdi"
@rendermode InteractiveServer
@using FTD2XX_NET
@using D3808_BattSys.Interop

<PageTitle>FTDI</PageTitle>

<h1>
    <span class="bi bi-usb-drive" aria-hidden="true"></span> FTDI
</h1>

<p>This page is for FTDI device interaction.</p>

<button class="btn btn-info ms-2" @onclick="OnGetDeviceListClick">
    <span class="bi bi-search" aria-hidden="true"></span> Get Device List
</button>

<button class="btn btn-warning ms-2" @onclick="OnGetDeviceInfoDetailClick">
    <span class="bi bi-info-circle" aria-hidden="true"></span> Get Device Info Detail
</button>

<button class="btn btn-primary ms-2" @onclick="OnCheckModeClick">
    <span class="bi bi-eye"></span> Check Mode
</button>

<button class="btn btn-danger ms-2" @onclick="OnResetDeviceClick">
    <span class="bi bi-arrow-repeat"></span> Reset Device
</button>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

@if (deviceList is not null)
{
    <div class="mt-3">
        <h5>FTDI Devices Found:</h5>
        @if (deviceList.Length == 0)
        {
            <div class="alert alert-warning">No FTDI devices found.</div>
        }
        else
        {
            <ul>
                @foreach (var dev in deviceList)
                {
                    <li>
                        <strong>@dev.Description</strong> (Serial: @dev.SerialNumber, Location: @dev.LocId)
                    </li>
                }
            </ul>
        }
    </div>
}

@if (deviceInfoDetails is not null)
{
    <div class="mt-3">
        <h5>FTDI Device Info Details:</h5>
        <ul>
            @foreach (var info in deviceInfoDetails)
            {
                <li>
                    <strong>@info.Description</strong><br />
                    Serial: @info.SerialNumber<br />
                    Flags: @info.Flags<br />
                    Type: @info.Type<br />
                    ID: @info.ID<br />
                    Location: @info.LocId<br />
                    <!-- Removed Handle as it does not exist -->
                </li>
            }
        </ul>
    </div>
}

@code {
    private string? message;
    private FTDI.FT_DEVICE_INFO_NODE[]? deviceList;
    private List<FTDI.FT_DEVICE_INFO_NODE>? deviceInfoDetails;

    private async Task OnGetDeviceListClick()
    {
        message = null;
        deviceInfoDetails = null; // Clear details when listing devices
        await Task.Yield();
        try
        {
            var ftdi = new FTDI();
            uint count = 0;
            var status = ftdi.GetNumberOfDevices(ref count);
            if (status != FTDI.FT_STATUS.FT_OK)
            {
                message = $"Error getting device count: {status}";
                deviceList = null;
                return;
            }

            if (count == 0)
            {
                message = "No FTDI devices found.";
                deviceList = Array.Empty<FTDI.FT_DEVICE_INFO_NODE>();
                return;
            }

            var list = new FTDI.FT_DEVICE_INFO_NODE[count];
            status = ftdi.GetDeviceList(list);
            if (status != FTDI.FT_STATUS.FT_OK)
            {
                message = $"Error getting device list: {status}";
                deviceList = null;
                return;
            }

            deviceList = list;
            message = $"Found {count} FTDI device(s).";
        }
        catch (Exception ex)
        {
            message = $"Exception: {ex.Message}";
            deviceList = null;
        }
    }

    private async Task OnGetDeviceInfoDetailClick()
    {
        message = null;
        deviceList = null; // Clear list when showing details
        await Task.Yield();
        deviceInfoDetails = null;
        try
        {
            var ftdi = new FTDI();
            uint count = 0;
            var status = ftdi.GetNumberOfDevices(ref count);
            if (status != FTDI.FT_STATUS.FT_OK)
            {
                message = $"Error getting device count: {status}";
                return;
            }

            if (count == 0)
            {
                message = "No FTDI devices found.";
                return;
            }

            var list = new FTDI.FT_DEVICE_INFO_NODE[count];
            status = ftdi.GetDeviceList(list);
            if (status != FTDI.FT_STATUS.FT_OK)
            {
                message = $"Error getting device list: {status}";
                return;
            }

            deviceInfoDetails = new List<FTDI.FT_DEVICE_INFO_NODE>();
            for (uint i = 0; i < count; i++)
            {
                deviceInfoDetails.Add(list[i]);
            }

            message = $"Device info detail for {count} FTDI device(s) retrieved.";
        }
        catch (Exception ex)
        {
            message = $"Exception: {ex.Message}";
        }
    }

    private async Task OnCheckModeClick()
    {
        message = null;
        deviceList = null;
        deviceInfoDetails = null;
        await Task.Yield();

        // Step 1: Set MPSSE mode using FTDI managed API
        try
        {
            var ftdi = new FTDI();
            var status = ftdi.OpenByIndex(0);
            if (status != FTDI.FT_STATUS.FT_OK)
            {
                message = $"Error opening device: {status}";
                return;
            }

            status = ftdi.SetBitMode(0x00, 0x02);
            if (status != FTDI.FT_STATUS.FT_OK)
            {
                message = $"Error setting MPSSE mode: {status}";
                ftdi.Close();
                return;
            }

            await Task.Delay(50);
            ftdi.Close();
        }
        catch (Exception ex)
        {
            message = $"Exception during MPSSE mode set: {ex.Message}";
            return;
        }

        // Step 2: Check MPSSE mode using D2xxNative
        IntPtr ftHandle = IntPtr.Zero;
        try
        {
            int status = D2xxNative.FT_Open(0, ref ftHandle);
            if (status != 0)
            {
                message = $"FT_Open failed: {status}";
                return;
            }

            // Write 0xAA (MPSSE sync command)
            byte[] syncCmd = { 0xAA };
            uint bytesWritten = 0;
            status = D2xxNative.FT_Write(ftHandle, syncCmd, 1, ref bytesWritten);
            if (status != 0 || bytesWritten != 1)
            {
                message = $"FT_Write failed: {status}, bytes written: {bytesWritten}";
                return;
            }

            await Task.Delay(100);

            // Read response (should be 0xFA 0xAA if MPSSE is active)
            byte[] response = new byte[2];
            uint bytesRead = 0;
            status = D2xxNative.FT_Read(ftHandle, response, 2, ref bytesRead);
            if (status != 0 || bytesRead < 2)
            {
                message = $"FT_Read failed: {status}, bytes read: {bytesRead}";
                return;
            }

            if (response[0] == 0xFA && response[1] == 0xAA)
            {
                message = "MPSSE mode is ACTIVE (echo back test passed: 0xFA 0xAA).";
            }
            else
            {
                message = $"MPSSE mode NOT active or echo failed. Response: 0x{response[0]:X2} 0x{response[1]:X2}";
            }
        }
        catch (Exception ex)
        {
            message = $"Exception during MPSSE check: {ex.Message}";
        }
        finally
        {
            if (ftHandle != IntPtr.Zero)
            {
                D2xxNative.FT_Close(ftHandle);
            }
        }
    }

    private async Task OnResetDeviceClick()
    {
        message = null;
        deviceList = null;
        deviceInfoDetails = null;
        await Task.Yield();
        try
        {
            var ftdi = new FTDI();
            var status = ftdi.OpenByIndex(0);
            if (status != FTDI.FT_STATUS.FT_OK)
            {
                message = $"Error opening device: {status}";
                return;
            }

            status = ftdi.ResetDevice();
            if (status != FTDI.FT_STATUS.FT_OK)
            {
                message = $"Error resetting device: {status}";
                ftdi.Close();
                return;
            }

            message = "Device reset successfully.";
            ftdi.Close();
        }
        catch (Exception ex)
        {
            message = $"Exception: {ex.Message}";
        }
    }
}